/**
 * AI Types
 * 
 * This file contains centralized type definitions for AI-related functionality,
 * including prompt templates, generation requests, responses, and metadata.
 */

import { 
  GenreType, 
  PROJECT_GENRES, 
  TARGET_AUDIENCES, 
  TargetAudienceType 
} from './project.types';
import { CharacterRole, CHARACTER_ROLES } from './character.types';
import { SettingType, SETTING_TYPES } from './setting.types';

/**
 * AI Generation Metadata Interface
 * 
 * This interface captures metadata about content generated by AI.
 * It's used across the application to track AI-generated content.
 */
export interface AiGenerated {
  isGenerated: boolean;
  generatedTimestamp?: Date;
  prompt?: string;
  model?: string;
}

/**
 * AI Task Types
 * 
 * These are the supported AI task types for content generation.
 */
export const AI_TASK_TYPES = [
  'character', 
  'plot', 
  'setting', 
  'chapter', 
  'editorial'
] as const;

export type AITaskType = typeof AI_TASK_TYPES[number];

/**
 * Content Filtering Levels
 * 
 * These determine how strictly the AI should filter generated content.
 */
export const CONTENT_FILTER_LEVELS = [
  'strict', 
  'standard', 
  'relaxed'
] as const;

export type ContentFilterLevelType = typeof CONTENT_FILTER_LEVELS[number];

/**
 * Response Format Types
 * 
 * These determine the format of the AI's response.
 */
export const RESPONSE_FORMAT_TYPES = [
  'as_json', 
  'markdown', 
  'html'
] as const;

export type ResponseFormatType = typeof RESPONSE_FORMAT_TYPES[number];

/**
 * AI Focus Areas
 * 
 * These are the areas on which editorial feedback can focus.
 */
export const AI_FOCUS_AREAS = [
  'character', 
  'plot', 
  'setting', 
  'object', 
  'chapter', 
  'dialogue', 
  'description', 
  'pacing'
] as const;

export type AIFocusAreaType = typeof AI_FOCUS_AREAS[number];

/**
 * Target Length Options for AI-generated content
 */
export const AI_TARGET_LENGTH_TYPES = [
  'short',
  'medium',
  'long'
] as const;

export type AITargetLengthType = typeof AI_TARGET_LENGTH_TYPES[number];

/**
 * Image Generation Size Options
 */
export const AI_IMAGE_SIZES = [
  '1024x1024',
  '1024x1792',
  '1792x1024'
] as const;

export type AIImageSizeType = typeof AI_IMAGE_SIZES[number];

/**
 * Generic prompt template type
 */
export type PromptTemplate<T extends Record<string, any>> = (params: T) => string;

/**
 * Response format options
 */
export interface ResponseFormatOptions {
  as_json?: boolean;
  markdown_level?: number;
  include_reasoning?: boolean;
}

/**
 * Base request interface for all AI generation tasks
 */
export interface AIGenerationRequest {
  task: AITaskType;
  project_id: string;
  user_id: string;
  genre?: GenreType;
  audience?: TargetAudienceType;
  filter_level?: ContentFilterLevelType;
  format_options?: ResponseFormatOptions;
  max_tokens?: number;
  temperature?: number;
}

/**
 * Character generation request
 */
export interface CharacterGenerationRequest extends AIGenerationRequest {
  task: 'character';
  name?: string;
  role?: string;
  age_range?: string;
  key_traits?: string[];
  related_characters?: string[];
  narrative_importance?: CharacterRole;
}

/**
 * Plot generation request
 */
export interface PlotGenerationRequest extends AIGenerationRequest {
  task: 'plot';
  plot_points?: string[];
  characters?: string[];
  setting?: string;
  conflict_type?: string;
  desired_length?: AITargetLengthType;
}

/**
 * Setting generation request
 */
export interface SettingGenerationRequest extends AIGenerationRequest {
  task: 'setting';
  setting_type?: SettingType;
  time_period?: string;
  mood?: string;
  key_features?: string[];
}

/**
 * Chapter generation request
 */
export interface ChapterGenerationRequest extends AIGenerationRequest {
  task: 'chapter';
  title?: string;
  characters_present?: string[];
  setting?: string;
  previous_chapter_summary?: string;
  goals?: string[];
  word_count?: number;
}

/**
 * Editorial feedback request
 */
export interface EditorialFeedbackRequest extends AIGenerationRequest {
  task: 'editorial';
  content: string;
  focus_areas?: AIFocusAreaType[];
}

/**
 * Union type of all AI generation requests
 */
export type AIRequest = 
  | CharacterGenerationRequest
  | PlotGenerationRequest
  | SettingGenerationRequest
  | ChapterGenerationRequest
  | EditorialFeedbackRequest;

/**
 * Token usage information
 */
export interface TokenUsage {
  prompt: number;
  completion: number;
  total: number;
}

/**
 * AI generation metadata
 */
export interface AIGenerationMetadata {
  model: string;
  timestamp: string;
  token_usage: TokenUsage;
}

/**
 * AI service response structure
 */
export interface AIResponse {
  content: string;
  metadata: AIGenerationMetadata;
}

/**
 * Error response for AI service
 */
export interface AIErrorResponse {
  error: {
    code: string;
    message: string;
    details?: any;
  }
}

/**
 * Image generation request
 */
export interface ImageGenerationRequest {
  prompt: string;
  size?: AIImageSizeType;
  project_id: string;
  user_id: string;
}

/**
 * Full AI generation model
 */
export interface AIGenerationModel {
  id: string;
  project_id: string;
  user_id: string;
  task: AITaskType;
  request_params: Record<string, any>;
  response_content: string;
  metadata: AIGenerationMetadata;
  created_at: Date | string;
  is_saved: boolean;
  parent_id?: string;
} 